//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/InputSystem/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Attacks"",
            ""id"": ""521bf5e8-722f-4b91-9346-feb00087ccfd"",
            ""actions"": [
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""86d73945-9ab6-4729-b5d2-5f669d2bb1bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Spin"",
                    ""type"": ""Button"",
                    ""id"": ""6681e255-214f-4603-930e-aa1e73faa5b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""40aa3c2f-2fa1-44cd-a2d2-421f973a5729"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Berserk"",
                    ""type"": ""Button"",
                    ""id"": ""62157ca4-eb4e-4611-9f76-59e796addccc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8d0a9b2c-b148-44cb-8b2c-a5c5d7ea1e3e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d3efebf-0378-4fe5-a0ec-9849e19cd193"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""612182fd-fec2-4120-b490-93816f07538d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8ce1fb4-87bb-49ac-bc0c-73677bd047dd"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1dc32f30-8cd3-4d80-bcc9-187f6a7e8609"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3d7303c-0483-4bf3-ae8e-c3ce121209fc"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca829f07-7bb6-493f-bf81-13b4ea333c95"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Berserk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8d5a716-5248-45c9-ba2d-68c37dee28c8"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Berserk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Movement"",
            ""id"": ""50f6b172-a7e6-479f-a9bb-4eaa506471b9"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b0df92be-f92a-494f-a1b2-9008262f1045"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ab7b4a15-551e-42f7-b44a-01f9a58b4997"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4837410d-b67f-446b-bf0f-e108b2375f0a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""75410e6c-5fdf-4460-a63c-8b4beb6e1ac2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8c7cbc8a-0e0d-4b1e-b271-c64ec5d114a2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cd450bb3-16d7-4eec-b5c4-2f5078596655"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8b060149-5581-475b-8284-44ac24735b1b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Attacks
        m_Attacks = asset.FindActionMap("Attacks", throwIfNotFound: true);
        m_Attacks_Punch = m_Attacks.FindAction("Punch", throwIfNotFound: true);
        m_Attacks_Spin = m_Attacks.FindAction("Spin", throwIfNotFound: true);
        m_Attacks_Shoot = m_Attacks.FindAction("Shoot", throwIfNotFound: true);
        m_Attacks_Berserk = m_Attacks.FindAction("Berserk", throwIfNotFound: true);
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Movement = m_Movement.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Attacks
    private readonly InputActionMap m_Attacks;
    private IAttacksActions m_AttacksActionsCallbackInterface;
    private readonly InputAction m_Attacks_Punch;
    private readonly InputAction m_Attacks_Spin;
    private readonly InputAction m_Attacks_Shoot;
    private readonly InputAction m_Attacks_Berserk;
    public struct AttacksActions
    {
        private @PlayerInputs m_Wrapper;
        public AttacksActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Punch => m_Wrapper.m_Attacks_Punch;
        public InputAction @Spin => m_Wrapper.m_Attacks_Spin;
        public InputAction @Shoot => m_Wrapper.m_Attacks_Shoot;
        public InputAction @Berserk => m_Wrapper.m_Attacks_Berserk;
        public InputActionMap Get() { return m_Wrapper.m_Attacks; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AttacksActions set) { return set.Get(); }
        public void SetCallbacks(IAttacksActions instance)
        {
            if (m_Wrapper.m_AttacksActionsCallbackInterface != null)
            {
                @Punch.started -= m_Wrapper.m_AttacksActionsCallbackInterface.OnPunch;
                @Punch.performed -= m_Wrapper.m_AttacksActionsCallbackInterface.OnPunch;
                @Punch.canceled -= m_Wrapper.m_AttacksActionsCallbackInterface.OnPunch;
                @Spin.started -= m_Wrapper.m_AttacksActionsCallbackInterface.OnSpin;
                @Spin.performed -= m_Wrapper.m_AttacksActionsCallbackInterface.OnSpin;
                @Spin.canceled -= m_Wrapper.m_AttacksActionsCallbackInterface.OnSpin;
                @Shoot.started -= m_Wrapper.m_AttacksActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_AttacksActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_AttacksActionsCallbackInterface.OnShoot;
                @Berserk.started -= m_Wrapper.m_AttacksActionsCallbackInterface.OnBerserk;
                @Berserk.performed -= m_Wrapper.m_AttacksActionsCallbackInterface.OnBerserk;
                @Berserk.canceled -= m_Wrapper.m_AttacksActionsCallbackInterface.OnBerserk;
            }
            m_Wrapper.m_AttacksActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Punch.started += instance.OnPunch;
                @Punch.performed += instance.OnPunch;
                @Punch.canceled += instance.OnPunch;
                @Spin.started += instance.OnSpin;
                @Spin.performed += instance.OnSpin;
                @Spin.canceled += instance.OnSpin;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Berserk.started += instance.OnBerserk;
                @Berserk.performed += instance.OnBerserk;
                @Berserk.canceled += instance.OnBerserk;
            }
        }
    }
    public AttacksActions @Attacks => new AttacksActions(this);

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Movement;
    public struct MovementActions
    {
        private @PlayerInputs m_Wrapper;
        public MovementActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Movement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    public interface IAttacksActions
    {
        void OnPunch(InputAction.CallbackContext context);
        void OnSpin(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnBerserk(InputAction.CallbackContext context);
    }
    public interface IMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
